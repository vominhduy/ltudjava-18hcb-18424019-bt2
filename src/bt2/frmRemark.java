/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bt2;

import dao.ClassObjectStudentDAO;
import dao.ObjectDAO;
import dao.RemarkDAO;
import dao.RemarkDetailDAO;
import dao.StudentDAO;
import java.math.BigDecimal;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import pojo.ClassObjectStudent;
import pojo.Remark;
import pojo.RemarkDetail;
import pojo.Student;
import pojo.Object;

/**
 *
 * @author vomin
 */
public class frmRemark extends javax.swing.JDialog {
    /**
     * Creates new form frmRemark
     */
    public frmRemark(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        Remark remark = RemarkDAO.getRemark();
        
        if (remark != null)
        {
            txtFrom.setText(remark.getStart().toLocaleString());
            txtTo.setText(remark.getEnd().toLocaleString());
            
            List<RemarkDetail> lst = RemarkDetailDAO.getRemarks(remark.getStart());
            
            if (lst != null && lst.size() > 0)
            {
                String [] ColumNames = {"STT", "MSSV", "Họ và tên", "Môn", "Điểm cần phúc khảo", "Điểm mong muốn", "Điểm thực tế", "Lý do", "Trạng thái"};
                DefaultTableModel modeltable = new DefaultTableModel(null, ColumNames);
                
                int row = 0;
                for(int i = 0; i < lst.size(); i++)
                {
                    RemarkDetail a = (RemarkDetail)lst.get(i);
                    
                    Student stu = StudentDAO.getStudent(a.getStudentCode());
                    
                    if (stu != null)
                    {
                        Object obj = ObjectDAO.getObject(a.getObjectCode());
                        
                        if (obj != null)
                        {
                            String remarkPoint = "";
                            String statusStr = "";
                            int point = a.getRemarkPoint();
                            if (point == 1)
                            {
                                remarkPoint = "Điểm GK";
                            }
                            else if (point == 2)
                            {
                                remarkPoint = "Điểm CK";
                            }
                            else if (point == 2)
                            {
                                remarkPoint = "Điểm khác";
                            }
                            else
                            {
                                remarkPoint = "Điểm tổng";
                            }
                            
                            int status = a.getStatus();
                            
                            if (status == 1)
                            {
                                statusStr = "Chưa xem";
                            }
                            else if (status == 2)
                            {
                                statusStr = "Đã cập nhật";
                            }
                            else
                            {
                                statusStr = "Hủy cập nhật";
                            }
                            
                            modeltable.insertRow(row, new java.lang.Object[]{row + 1, stu.getCode(), stu.getName(), 
                                obj.getCode() + " - " + obj.getName(), remarkPoint, a.getRemarkExpect(), a.getRemarkActual(), a.getReason(),
                                statusStr});
                            row++;
                        }
                    }
                }
                
                tblRemark.removeAll();
                
                tblRemark.setModel(modeltable);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtTo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRemark = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Quản lý phúc khảo");

        jLabel2.setText("Thời gian phúc khảo");

        jButton1.setText("Cập nhật");

        jLabel3.setText("đến");

        tblRemark.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "MSSV", "Họ và tên", "Môn", "Điểm cần phúc khảo", "Điểm mong muốn", "Lý do", "Trạng thái"
            }
        ));
        jScrollPane1.setViewportView(tblRemark);

        btnUpdate.setText("Cập nhật điểm");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnCancel.setText("Hủy cập nhật điểm");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(12, 12, 12)
                        .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnUpdate)
                        .addGap(32, 32, 32)
                        .addComponent(btnCancel)))
                .addContainerGap(220, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnCancel))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        int row = tblRemark.getSelectedRow();
        String object = (String)tblRemark.getValueAt(row, 3);
        String studetnCode = (String)tblRemark.getValueAt(row, 1);
        String remarkPointStr = (String)tblRemark.getValueAt(row, 4);
        
        
        
        
        
        String objectCode = object.substring(0, object.indexOf(" - "));
        
        // get detail mark of student
        ClassObjectStudent tmpCls = ClassObjectStudentDAO.getObject(objectCode, studetnCode);
        
        if (tmpCls != null)
        {
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Không tìm thấy sinh viên học môn học này.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        String mark = (String)tblRemark.getValueAt(row, 6);
        
        Pattern pattern = Pattern.compile("[0-9]*\\.[0-9]+");
        Matcher matcher1 = pattern.matcher(mark);
        
        int remartPoint = 0;
        
        if (remarkPointStr.compareToIgnoreCase("Điểm GK") == 0)
        {
            remartPoint = 1;
        }
        else if (remarkPointStr.compareToIgnoreCase("Điểm CK") == 0)
        {
            remartPoint = 2;
        }
        else if (remarkPointStr.compareToIgnoreCase("Điểm khác") == 0)
        {
            remartPoint = 3;
        }
        else
        {
            remartPoint = 4;
        }
        
        if (!matcher1.matches())
        {
            JOptionPane.showMessageDialog(null, "Điểm số không hợp lệ.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        else
        {
            BigDecimal tmpBig = new BigDecimal(mark);
            
            if (remartPoint == 1)
                tmpCls.setMark1(tmpBig);
            else if (remartPoint == 2)
                tmpCls.setMark2(tmpBig);
            else if (remartPoint == 2)
                tmpCls.setMark3(tmpBig);
            else
                tmpCls.setMark4(tmpBig);
            
            
            ClassObjectStudent clsObjStu = ClassObjectStudentDAO.getObject(objectCode, studetnCode);
            
            if (clsObjStu != null)
            {
                RemarkDetail tmpRemarkDetail = RemarkDetailDAO.getRemarkDetail(objectCode, studetnCode, remartPoint);
                
                if (tmpRemarkDetail != null)
                {
                    tmpRemarkDetail.setRemarkActual(tmpBig);
                    tmpRemarkDetail.setStatus(2);
                    
                    if (RemarkDetailDAO.UpdateRemarkDetail(tmpRemarkDetail))
                    {
                        // update mark to student
                        if (ClassObjectStudentDAO.UpdateClassObjectStudent(tmpCls))
                        {
                            JOptionPane.showMessageDialog(null, "Cập nhật thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Lưu thông tin thất bại.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                        }
                        
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Lưu thông tin thất bại.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy sinh viên đăng ký phúc khảo.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Không tìm thấy sinh viên học môn này.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        
        int row = tblRemark.getSelectedRow();
        String object = (String)tblRemark.getValueAt(row, 3);
        String studetnCode = (String)tblRemark.getValueAt(row, 1);
        String remarkPointStr = (String)tblRemark.getValueAt(row, 4);
        
        String objectCode = object.substring(0, object.indexOf(" - "));
        
        int remartPoint = 0;
        
        if (remarkPointStr.compareToIgnoreCase("Điểm GK") == 0)
        {
            remartPoint = 1;
        }
        else if (remarkPointStr.compareToIgnoreCase("Điểm CK") == 0)
        {
            remartPoint = 2;
        }
        else if (remarkPointStr.compareToIgnoreCase("Điểm khác") == 0)
        {
            remartPoint = 3;
        }
        else
        {
            remartPoint = 4;
        }
        
        RemarkDetail tmp = RemarkDetailDAO.getRemarkDetail(objectCode, studetnCode, remartPoint);
        
        if (tmp != null)
        {
            tmp.setStatus(3);
            if (RemarkDetailDAO.UpdateRemarkDetail(tmp))
            {
                JOptionPane.showMessageDialog(null, "Cập nhật thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Thất bại.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Không tìm thấy sinh viên học môn này.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRemark.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRemark.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRemark.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRemark.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmRemark dialog = new frmRemark(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRemark;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables
}
